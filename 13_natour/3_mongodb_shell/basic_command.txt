command                            purpose
-------                           ---------
show dbs             ----->     this command will show all the database present inside mongodb.

use database_name    ----->     use command will check if the database already exist or not, if database already exist than it will switch to that database , but if the database is not present , than first it will create that database and switch to that database .

show collections     ----->      this command will show all the collections(table) available in our current databasw which we are   using now.

db.collection_name.insertOne({name:"Prakash" , price:400 , rating:2.5}) ----->  this command states that , " db means current database " , "collection_name means you can give your desired collection(table) name here and it will create that collection in your database" , "insertOne() function accepts documents(row data) in the form of plain javascript object". And finally after running this command , a new collection will be created having a single document as  data. And the javascript object which was send will be converted to json and finally into bson .

db.collection_nameinsertMany([{},{},{}])  ----->  this command is similar to above command , the only difference is that we can enter multiple "documents i.e. row" data at the same time .

db.collection_name.find()  ----->   this command will find the collection i.e. table whose name is written in place of "collection_name" and display all the data(documents) present inside that collection .

quit()              ----->    this command is used to quit the mongo shell .

"ctrl + l"          ----->    this command is used clear the mongo shell .

db.collection_name.find({name:"prakash"}) ----->  all the documents whose field have name="prakash" will be displayed . Its a way of filtering the data.

                 $  -----> this symbol refers to "operator" in mongodb.
                 $lt ----->  $ is saying that its a operator, and "lt" is saying that its "less than operator"
                 $gt ----->  "gt" is saying that its an "greater than operator".
                 $lte ---->  "lt" = less than    and    "lte" = less than equal to 
                 $gte ----->  "$gte" = greater than equal to operator . 

db.collection_name.find( { price:{$lte:500} } )  -----> this command is saying find all the files whose price is greater than and equal to 500.

========================================= And operator ========================================
db.collection_name.find({ price:{$lte:1000} , rating:${gte:4.5} }) ----> It is a way of using "And" operator in mongodb, where we define two conditions inside the same object .

========================================= Or operator =======================================
db.collection_name.find({ $or : [{price:{$lt:500}} , {rating:{$gt:4}}] }) ----> It is a way of using "OR" operator in mongoDB. Where if any one of the conditions is satisfied present inside the array , than it will display all the data satisfying any of these conditions.

======================================== display specific field only ===============================
db.collection_name.fincd({your condition here} , {name:1}) ----> the first object always defines the condition, and the second object is used which fields to be displayed. Since we wrote the name field only, so only name will be displayed.

========================================== update query =================================
db.collection_name.updateOne({ rating:{$gte4.5} } , {$set:{name: "prakash"}})  -----> this query will upade the name of our document. The first object inside "updateOne()" is to specify which object to update, it is similar to filtering in "find()" method, the second object is to set the new value of the "field" , And to update the old values we use "$set" operator.

db.collection_name.updateMany({} , {})  --> Everything is similar to above query, the only difference is that if there is multiple documents which satisfies the condition written inside "first object" , than "updateMany()" will update all those multiple documents, but the "updateOne()" will only update the first one among those multiple documents .

============================================ replace query ==================================
db.collection_name.replaceOne({ rating:{$gte4.5} } , {name:"prakash"}) -----> this query will remove all the old data(documents) in a row , and insert the new data i.e. " name : 'prakash' ". This will give us completely new data without updating the existing data. The first object is to search for the specific document , which you want to replace .

db.collection_name.replaceMany({ rating:{$gte4.5} } , {$set:{name:"prakash"}})  ----->  This query is used to replace multiple documents at the same time.

=========================================== delete query ===============================
db.collection.deleteMany({condtion_here})  --------->  This query will delete the documents inside you collection. Inside "deleteMany()" we will pass the condition similar to "find()" method to specify which method to delete, it is same for "deleteOne()" method too. 

db.collection_name.deleteManu({})   --------------->  If you just pass an "empty object" inside deleteMany() method than all the data present inside that collection will be deleted permanently.